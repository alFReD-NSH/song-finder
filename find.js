// Generated by CoffeeScript 1.3.3
(function() {
  var JSONStream, async, config, errorHandler, es, fs, libGet, questions, request, rl, start;

  async = require('async');

  request = require('request');

  JSONStream = require('JSONStream');

  es = require('event-stream');

  require('sugar');

  Object.extend();

  config = {};

  errorHandler = function(e) {
    console.error(e.stack);
    return process.exit();
  };

  libGet = function(type, options) {
    var jstream, method, req;
    if (options == null) {
      options = {};
    }
    method = 'library.get' + type.capitalize() + 's';
    options.merge({
      user: config.username,
      method: method,
      api_key: config.api,
      format: 'JSON',
      limit: 10
    });
    req = request({
      uri: 'http://ws.audioscrobbler.com/2.0',
      qs: options
    });
    jstream = JSONStream.parse([type + 's', type, true]);
    return es.connect(req, jstream, es.mapSync(function(data) {
      if (data.playcount > 3) {
        return data.name;
      }
    })).on('error', errorHandler);
  };

  start = function() {
    var addAlbum, addAlbumEnd, addAlbumWrite, artistS;
    artistS = libGet('artist');
    addAlbumWrite = function(artist) {
      var albumS,
        _this = this;
      this.pause();
      albumS = libGet('album', {
        artist: artist
      });
      albumS.pipe(es.map(function(album, cb) {
        var trackS;
        trackS = libGet('track', {
          artist: artist,
          album: album
        });
        return trackS.pipe(es.writeArray(function(err, tracks) {
          if (tracks.length) {
            album = {
              name: album,
              artist: artist,
              tracks: tracks
            };
            _this.emit('data', album);
          }
          return cb(null);
        }));
      }));
      return albumS.on('end', function() {
        return _this.resume();
      });
    };
    addAlbumEnd = function() {
      var _this = this;
      if (this.paused) {
        return this.on('resume', function() {
          return _this.emit('end');
        });
      } else {
        return this.emit('end');
      }
    };
    addAlbum = es.through(addAlbumWrite, addAlbumEnd);
    return es.connect(artistS, addAlbumEnd, JSONStream.stringify(false), process.stdout).on('err', errorHandler);
  };

  try {
    config = require('./config.json');
    start();
  } catch (e) {
    if (!e.message.has('./config.json')) {
      return errorHandler(e);
    }
    console.log("Seems you don't have a config.json file let's make one!");
    rl = require('readline').createInterface(process.stdin, process.stdout, null);
    fs = require('fs');
    console.log("Just go to this page: http://www.last.fm/api/account and get your credentials");
    questions = {
      api: 'Paste your API KEY here:',
      username: 'Now tell us your username:'
    };
    questions.each(function(key, question) {
      return questions[key] = function(cb) {
        return rl.question(question, cb.bind(null, null));
      };
    });
    async.series(questions, function(err, res) {
      config = res.each(processAnswer(key, value)(function() {
        var value;
        if (value) {
          value = value.trim();
          if (value.lengh) {
            return res[key] = value;
          }
        }
      }));
      fs.writeFileSync('./config.json', JSON.stringify(config), 'utf8');
      return start();
    });
  }

}).call(this);
