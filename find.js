// Generated by CoffeeScript 1.3.3
var JSONStream, ask, async, config, es, libGet, oldStart, request, start;

async = require('async');

request = require('request');

JSONStream = require('JSONStream');

es = require('event-stream');

require('sugar');

Object.extend();

config = {};

libGet = function(type, options) {
  var jstream, method, req;
  if (options == null) {
    options = {};
  }
  method = 'library.get' + type.capitalize() + 's';
  options.merge({
    user: config.username,
    method: method,
    api_key: config.api,
    format: 'JSON',
    limit: 10
  });
  req = request({
    uri: 'http://ws.audioscrobbler.com/2.0',
    qs: options
  });
  jstream = JSONStream.parse([type + 's', type, true]);
  return es.connect(req, jstream, es.mapSync(function(data) {
    if (data.playcount > 3) {
      return data.name;
    }
  }));
};

start = function() {
  var addAlbum, addAlbumEnd, addAlbumWrite, artistS;
  artistS = libGet('artist');
  addAlbumWrite = function(artist) {
    var albumS,
      _this = this;
    this.pause();
    albumS = libGet('album', {
      artist: artist
    });
    albumS.pipe(es.map(function(album, cb) {
      var trackS;
      trackS = libGet('track', {
        artist: artist,
        album: album
      });
      return trackS.pipe(es.writeArray(function(err, tracks) {
        if (tracks.length) {
          album = {
            name: album,
            artist: artist,
            tracks: tracks
          };
          _this.emit('data', album);
        }
        return cb(null);
      }));
    }));
    return albumS.on('end', function() {
      return _this.resume();
    });
  };
  addAlbumEnd = function() {
    var _this = this;
    if (this.paused) {
      return this.on('resume', function() {
        return _this.emit('end');
      });
    } else {
      return this.emit('end');
    }
  };
  addAlbum = es.through(addAlbumWrite, addAlbumEnd);
  return es.connect(artistS, addAlbum);
};

ask = function(cb) {
  var fs, questions, rl;
  if (cb == null) {
    cb = function() {};
  }
  console.log("Seems you don't have a config.json file let's make one!");
  rl = require('readline').createInterface(process.stdin, process.stdout, null);
  fs = require('fs');
  console.log("Just go to this page: http://www.last.fm/api/account and get your credentials");
  questions = {
    api: 'Paste your API KEY here',
    username: 'Now tell us your username'
  };
  questions.each(function(key, question) {
    if (Object.has(config, key)) {
      question += ' (' + config[key] + ') :';
    }
    return questions[key] = function(cb) {
      return rl.question(question, function(a) {
        return cb(null, a);
      });
    };
  });
  return async.series(questions, function(err, res) {
    config = res.each(function(key, value) {
      if (value == null) {
        value = '';
      }
      value = value.trim();
      if (value.lengh) {
        return config[key] = value;
      }
    });
    fs.writeFileSync('./config.json', JSON.stringify(config), 'utf8');
    return cb();
  });
};

if (!module.parent) {
  oldStart = start;
  start = function(config) {
    return es.connect(oldStart(config), JSONStream.stringify(false), process.stdout).on('err', function(e) {
      throw e;
    });
  };
  try {
    config = require('./config.json');
  } catch (e) {
    if (!e.message.has('config.json')) {
      throw e;
    }
    config = {};
  }
  start = start.bind(null, config);
  if (config.api && config.username) {
    start(config);
  } else {
    ask(start);
  }
} else {
  module.exports = start;
}
